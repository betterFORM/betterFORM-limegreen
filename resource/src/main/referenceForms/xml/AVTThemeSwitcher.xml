<?xml version="1.0" encoding="UTF-8"?>
<html xmlns:xf="http://www.w3.org/2002/xforms"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:bf="http://betterform.sourceforge.net/xforms"
        bf:evalAVTs="class style">
    <head>
        <title>AVT Theme Switcher</title>
<!--
  ~ Copyright (c) 2012. betterFORM Project - http://www.betterform.de
  ~ Licensed under the terms of BSD License
-->


        <style type="text/css">
            @import "../../bfResources/scripts/dijit/themes/tundra/tundra.css";
            @import "../../bfResources/scripts/dijit/themes/soria/soria.css";
            @import "../../bfResources/scripts/dijit/themes/claro/claro.css";

            .tundra h1, .soria h1, .claro h1 {
                font-size: 20pt;
            }

            .bfVerticalTable .xfControl {
                margin: 10px;
            }

            .bfVerticalTable .xfSelect1 {
                margin-top: 0;
            }
			.bfVerticalTableLabel{
				vertical-align:middle;
			}
			.bfVerticalTableInfo{display:none;}
            .claro .xfInput .xfValue{height:1.6em;}
        </style>
    </head>
    <body class="{theme} InlineAlert bf">
        <div class="description">
            <p>
                This page demonstrates the use of Attribute Value Templates (AVT) as known from XSL. By
                putting an attribute value inside of curly brackets you signal to the processor to evaluate the
                contents as an XPath expression.
            </p>
            <p>
                AVTs can be used to dynamically style a page dependent on some instance data. The example below switches
                between the main Dojo themes available.
            </p>
            <p>
                AVTs in betterFORM are operating on the host document, this means that classes added in XSLt or JavaScript
                will be lost if the AVT changes during runtime (due to the host document does not know about CSS classes
                added later on)
            </p>
        </div>
        <!-- [
            this is the region to put sample xforms code. Everything that is surrounded by <code> tags
            will be displayed as markup on the page. Section that use <code class="ui"> are rendered on the page.
            This means you can have hidden ui sections (if ever that will be needed) as long as they are within
            the <div class="markup">.
        ]-->
        <div class="sample">
            <div class="markup">
                <code><html xmlns:xf="http://www.w3.org/2002/xforms"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:bf="http://betterform.sourceforge.net/xforms"
        bf:evalAVTs="class style">
    <body class="{theme}">...</body>   
</html>
                </code>
                <xf:model>
                    <code>
<xf:instance id="instance-1" xmlns="">
    <avt>
        <theme>tundra</theme>
    </avt>
</xf:instance>
                    </code>
                </xf:model>
                <code class="ui">
<xf:group id="outer" appearance="bf:verticalTable">
    <xf:select1 id="select" ref="theme" appearance="full" incremental="true">
        <xf:label>Switch Theme</xf:label>
        <xf:item>
            <xf:label>claro</xf:label>
            <xf:value>claro</xf:value>
        </xf:item>
        <xf:item>
            <xf:label>soria</xf:label>
            <xf:value>soria</xf:value>
        </xf:item>
        <xf:item>
            <xf:label>tundra</xf:label>
            <xf:value>tundra</xf:value>
        </xf:item>
    </xf:select1>

    <xf:trigger>
        <xf:label>a sample trigger</xf:label>
        <xf:message>button clicked</xf:message>
    </xf:trigger>
    <xf:input id="input1" ref="theme">
        <xf:label>current theme</xf:label>
    </xf:input>
</xf:group>
                </code>
            </div>
        </div>
        <div class="Limitations">
            <p>
            AVTs do not work inside of the <span class="keyword">class</span> attribute on xforms UI elements as it
            would overwrite the state classes that are computed to reflect the control status.
            </p>
            <p>
                It is easy to work around this restriction by simply wrapping the wanted element inside of a 
                <span class="keyword">span</span> or <span class="keyword">div</span>.
            </p>
        </div>
    </body>
</html>
